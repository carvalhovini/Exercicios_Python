from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
        
    def addEdge(self, u, v):
        self.graph[u].append(v)
        
    def DLS(self, src, target, max_depth):
        if src == target:
            return True
        
        if max_depth <= 0:
            return False
        
        for i in self.graph[src]:
            if self.DLS(i, target, max_depth-1) == True:
                return True
        
        return False
    
    def IDDFS(self, src, target):
        for i in range(10000):
            if self.DLS(src, target, i) == True:
                return True
        return False
    
g = Graph()
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 2)
g.addEdge(2, 0)
g.addEdge(2, 3)
g.addEdge(3, 3)
src = 2
target = 3

if g.IDDFS(src, target) == True:
    print("Existe um caminho entre o nó", src, "e o nó", target)
else:
    print("Não existe um caminho entre o nó", src, "e o nó", target)
